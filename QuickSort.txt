package program1;import java.util.Arrays;import java.util.Random;import java.util.Scanner;// regular QuickSort algorithmclass QuickSort{	public static int exchange;	public static int comparison;  static void swap(int[] array, int i, int j){ int temp = array[i]; array[i] = array[j]; array[j] = temp; exchange++;}// pivot is obtained and partition places pivot at correct location after sortingstatic int partition(int[] array, int low, int high){	 // pivot value is array[high] int pivot = array[high]; int i = (low - 1); for(int j = low; j <= high - 1; j++) {	 comparison++;     if (array[j] < pivot)     {         i++;         swap(array, i, j);     } } swap(array, i + 1, high); return (i+1);}// quicksort sorts elements separately before and after partition elementstatic void quickSort(int[] array, int low, int high){ if (low < high) {	 // partitioning index     int parti = partition(array, low, high);     quickSort(array, low, parti - 1);     quickSort(array, parti + 1, high); }}// printing arraystatic void printArray(int[] array, int size){	System.out.println("\nComparisons: " + comparison);	System.out.println("Swaps: " + exchange);    System.out.println();}// main methodpublic static void main(String[] args){	Scanner sc = new Scanner(System.in);	System.out.println("Regular QuickSort with ascending list.");	System.out.println("Generating array of length:");	int number = sc.nextInt();	int[] array = new int[number];	for (int i = 0; i < array.length; i++)	 {		 array[i] = i;		 //System.out.println(arr[i]);	 }	int n = array.length;	quickSort(array, 0, n - 1);	printArray(array, n);}}